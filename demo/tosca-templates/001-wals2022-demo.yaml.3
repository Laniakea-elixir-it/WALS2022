tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://raw.githubusercontent.com/mtangaro/tosca-types/laniakea-galaxy/custom_types.yaml

description: >
  Launch a compute node getting the IP and SSH credentials to access via ssh

topology_template:

  inputs:

    users:
      type: list
      description: list of users to create on the VM
      entry_schema:
        type: tosca.datatypes.indigo.User
      default: []
      required: false

    # Virtual Hardware
    instance_flavor:
      type: string
      description: instance flavor (num_cpu, memory, disk)
      default: large
    storage_size:
      type: string
      description: storage memory required for the instance
    export_dir:
      type: string
      description: path to store galaxy data
      default: /export

    # Storage encryption
    storage_encryption:
      type: boolean
      description: Enable storage encryption using Vault to store secrets and LUKS to encrypt
      default: False
      required: true
    vault_encryption_token:
      type: map
      description: Vault write token for storage encryption
      entry_schema:
        type: tosca.datatypes.indigo.VaultToken
      default: {}
      required: false
    vault_encryption_path:
      type: string
      description: Secret path for encryption passphrase
      default: "sub/dep.uuid/storage_encryption"
      required: false
    vault_encryption_key:
      type: string
      description: Secret key for encryption passphrase
      default: 'storage_encryption_key'
      required: false

    # Galaxy
    admin_email:
      type: string
      description: email of the admin user
      default: admin@admin.com
    admin_api_key:
      type: string
      description: api key admin user.
      default: random
    version:
      type: string
      description: galaxy version to install
      default: master
    instance_description:
      type: string
      description: galaxy instance description
      default: "INDIGO Galaxy test"
    export_dir:
      type: string
      description: path to store galaxy data
      default: /export
    enable_interactive_tools:
      type: boolean
      description: Enable Galaxy Interactive Tools (install docker)
      default: true
      required: false
    flavor:
      type: string
      description: Galaxy flavor for tools installation
      default: "galaxy-minimal"

  node_templates:

    luks_encryption:
      type: tosca.nodes.indigo.LuksEncryption
      properties:
        storage_encryption: { get_input: storage_encryption }
        vault_encryption_token: { get_input: vault_encryption_token }
        vault_encryption_path:  { get_input: vault_encryption_path }
        vault_encryption_key:  { get_input: vault_encryption_key }
      requirements:
        - host: simple_node

    galaxy:
      type: tosca.nodes.indigo.GalaxyPortalExpress
      properties:
        admin_email: { get_input: admin_email }
        admin_api_key: { get_input: admin_api_key }
        version: { get_input: version }
        instance_description: { get_input: instance_description }
        export_dir: { get_input: export_dir }
        enable_interactive_tools: { get_input: enable_interactive_tools }
        flavor: { get_input: flavor }
      requirements:
        - lrms: local_lrms
        - dependency: luks_encryption

    # type to describe a Galaxy not using any LRMS but using the local system
    local_lrms:
      type: tosca.nodes.indigo.LRMS.FrontEnd.Local
      requirements:
        - host: simple_node
        - dependency: luks_encryption

    simple_node:
      type: tosca.nodes.indigo.Compute
      properties:
        os_users: { get_input: users }
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            private_ip: false
            ports:
              http_port:
                protocol: tcp
                source: 80
              ftp_port:
                protocol: tcp
                source: 21
              ftp_passive:
                protocol: tcp
                source_range: [ 30000, 30009 ]
              luks_api_port:
                protocol: tcp
                source: 5000
        scalable:
          properties:
            count: 1
        host:
          properties:
            instance_type: { get_input: instance_flavor }
        os:
          properties:
            image: galaxy-express
      requirements:
        - local_storage:
            node: my_block_storage
            capability: tosca.capabilities.Attachment
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: /export
                location: { get_input: export_dir }
                device: hdb

    my_block_storage:
      type: tosca.nodes.BlockStorage
      properties:
        size: { get_input: storage_size }

  outputs:
    endpoint:
      value: { concat: [ 'http://', get_attribute: [ simple_node, public_address, 0 ], '/galaxy' ] }      
      #value: { get_attribute: [ simple_node, public_address, 0 ] }
    node_ip:
      value: { get_attribute: [ simple_node, public_address, 0 ] }
    node_creds:
      value: { get_attribute: [ simple_node, endpoint, credential, 0 ] }
    os_users:
      value: { get_property: [ simple_node, os_users, 0 ] }
